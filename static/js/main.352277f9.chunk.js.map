{"version":3,"sources":["components/Word/Word.tsx","components/WordList/WordList.tsx","components/Submit/Submit.tsx","components/Task/TaskDescription.tsx","initialData.tsx","components/Container/Container.tsx","components/Logo/Logo.tsx","components/Header/Header.tsx","App.tsx","index.tsx"],"names":["Word","props","draggableId","word","id","index","provided","className","draggableProps","dragHandleProps","ref","innerRef","content","WordList","data","words","row","useState","setSentence","useEffect","sentenceArr","wordsArr","Object","values","i","order","length","j","push","giveInput","join","droppableId","direction","droppableProps","map","item","key","placeholder","Submit","onClick","reset","verify","Task","initialData","Container","setData","correctSentence","input","setInput","showCorrect","setShowCorrect","showFalse","setShowFalse","onDragEnd","result","destination","source","newTaskIds","splice","newRow","newData","Logo","href","Header","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.352277f9.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport './Word.css';\r\n\r\nfunction Word(props: any) {\r\n  return (\r\n    <Draggable\r\n      draggableId={props.word.id}\r\n      index={props.index}\r\n    >\r\n      {(provided: any) => (\r\n          <span \r\n            className=\"word\"\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            ref={provided.innerRef}\r\n          >\r\n            {props.word.content}\r\n          </span>\r\n      )}\r\n    </Draggable>\r\n  );\r\n}\r\n\r\nexport default Word;\r\n","import React, { SetStateAction } from 'react'\r\nimport { useEffect, useState } from 'react'\r\nimport './WordList.css'\r\nimport { Droppable } from 'react-beautiful-dnd'\r\nimport Word from '../Word/Word'\r\n\r\nfunction WordList(props: any) {\r\n  let { words, row } = props.data\r\n  let [ sentence, setSentence ] = useState(['placeholder'])\r\n\r\n  useEffect(() => {\r\n    const sentenceArr = []\r\n    let wordsArr: any = Object.values(words)\r\n\r\n    for (let i = 0; i < row.order.length; i++) {\r\n      for (let j = 0; j < row.order.length; j++) {\r\n        if (row.order[i] === wordsArr[j].id) {\r\n          sentenceArr.push(wordsArr[j].content)\r\n        }\r\n      }\r\n    }\r\n\r\n    setSentence(sentenceArr)\r\n    props.giveInput(sentenceArr.join(' '))\r\n  }, [row])\r\n\r\n  return (\r\n    <Droppable droppableId={row.id} direction=\"horizontal\">\r\n      {(provided: any) => (\r\n          <div \r\n            className=\"wordList\"\r\n            ref={provided.innerRef}\r\n            {...provided.droppableProps}\r\n          >\r\n            {row.order.map((item: any, index: any) => \r\n              <Word \r\n                key={`${item}`}\r\n                word={words[item]}\r\n                index={index}\r\n              />\r\n            )}\r\n            {provided.placeholder}\r\n          </div>\r\n        )\r\n      }\r\n    </Droppable>\r\n  );\r\n}\r\n\r\nexport default WordList;\r\n","import React from 'react';\r\nimport './Submit.css';\r\n\r\nfunction Submit(props: any) {\r\n  function submitHandler() {\r\n    props.verify()\r\n  }\r\n\r\n  return (\r\n    <div className=\"submit\">\r\n      <button onClick={() => props.reset()}>&#x21bb; Reset</button>\r\n      <button onClick={() => submitHandler()}>Submit the answer</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Submit;\r\n","import React from 'react';\r\nimport './Task.css';\r\n\r\nfunction Task() {\r\n  return (\r\n    <div className=\"task\">\r\n        Order words to form a sentence\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","const initialData = {\r\n    words: {\r\n       'word-1': {id: 'word-1', content: 'hey'},\r\n       'word-2': {id: 'word-2', content: ','},\r\n       'word-3': {id: 'word-3', content: 'how'},\r\n       'word-4': {id: 'word-4', content: 'are'},\r\n       'word-5': {id: 'word-5', content: 'you'},\r\n       'word-6': {id: 'word-6', content: 'doing'},\r\n       'word-7': {id: 'word-7', content: '?'},\r\n    },\r\n    row: {\r\n        id: 'row-1',\r\n        order: ['word-2','word-1','word-3','word-5','word-4','word-6','word-7']\r\n    }\r\n}\r\n\r\nexport default initialData;","import React from 'react';\r\nimport './Container.css'\r\nimport { useState } from 'react'\r\nimport WordList from '../WordList/WordList'\r\nimport Submit from '../Submit/Submit'\r\nimport Task from '../Task/TaskDescription'\r\nimport { DragDropContext } from 'react-beautiful-dnd'\r\nimport initialData from '../../initialData'\r\n\r\nfunction Container() {\r\n  const [data, setData] = useState(initialData)\r\n  const [correctSentence, setCorrectSentence] = useState('hey , how are you doing ?')\r\n  const [input, setInput] = useState('')\r\n  const [showCorrect, setShowCorrect] = useState(false)\r\n  const [showFalse, setShowFalse] = useState(false)\r\n\r\n  function sentenceVerifier() {\r\n    if (correctSentence === input) {\r\n      setShowCorrect(true)\r\n      setShowFalse(false)\r\n    }\r\n    else {\r\n      setShowFalse(true)\r\n      setShowCorrect(false)\r\n    }\r\n  }\r\n\r\n  function reset() {\r\n    setShowCorrect(false)\r\n    setShowFalse(false)\r\n  }\r\n\r\n  function onDragEnd(result: any) {\r\n    const {destination, source, draggableId} = result\r\n\r\n    if (!destination) {\r\n      return\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index  \r\n    ) {\r\n      return\r\n    }\r\n\r\n    const row = data.row\r\n    const newTaskIds = [...row.order] // Array.from(row.order)\r\n    newTaskIds.splice(source.index, 1)\r\n    newTaskIds.splice(destination.index, 0, draggableId)\r\n   \r\n    const newRow = {\r\n      ...row,\r\n      order: newTaskIds\r\n    }\r\n\r\n    const newData = {\r\n      ...data,\r\n      row: newRow\r\n    }\r\n\r\n    setData(newData)\r\n}\r\n\r\n  return (\r\n    <div className=\"container\">\r\n        <Task/>\r\n        <>Hint: sentence is 'hey, how are you doing?'</>\r\n        <DragDropContext\r\n          onDragEnd={onDragEnd}\r\n        >\r\n          <WordList data={data} giveInput={(input: any) => setInput(input)}/>\r\n        </DragDropContext>\r\n        {showCorrect ? <div className=\"correct\">You are Correct!!!</div> : <></>}\r\n        {showFalse ? <div className=\"false\">You are Wrong!!!</div> : <></>}\r\n        <Submit verify={() => sentenceVerifier()} reset={() => reset()}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Container;\r\n","import React from 'react';\r\nimport './Logo.css';\r\n\r\nfunction Logo() {\r\n  return (\r\n    <a href=\"#\" className=\"logo\">\r\n        NotDuoLingo\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport Logo from '../Logo/Logo';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <Logo/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport Container from './components/Container/Container';\nimport Header from './components/Header/Header';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"body-outer-wrapper\">\n        <Header/>\n        <Container/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}